# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

#Javascript
'.source.js':
  'Backbone View':
    'prefix': 'bbv'
    'body': '''Backbone.View.extend({
      ${1:// }
    });'''
  'Backbone Model':
    'prefix': 'bbm'
    'body': '''Backbone.Model.extend({
      ${1:// }
    });'''
  'Backbone Collection':
    'prefix': 'bbc'
    'body': '''Backbone.Collection.extend({
      ${1:// }
    });'''
  'Backbone Router':
    'prefix': 'bbr'
    'body': '''Backbone.Router.extend({
      ${1:// }
    });'''
  'Backbone Module':
    'prefix': 'bbmod'
    'body': '''var app = app || {};

    (function($) {
      'use strict';

      var ${1:thing} = Backbone.${2:View}.extend({
        ${4:// }
      });

      app.${3:Module} = ${1:thing};

    }(jQuery));'''
  '() ? a : b;':
    'prefix': 'ternary'
    'body': '(${1:expression}) ? ${2:true} : ${3:false};$4'
  'ObjKey : value,':
    'prefix': 'kv'
    'body': '${1:key}: ${2:value},$3'
  'Arrow Function':
    'prefix': 'lambda'
    'body': '($1) => {$2}$3'
  '<Obj> => Method':
    'prefix': 'kfa'
    'body': '${1:methodName}: (${2:attribute}) => {\n\t$3\n}${4:,}$5'
  'CommonJS require':
    'prefix': 'req'
    'body': 'var ${1:module} = require(\'${3:${1:module}}\');$2$4'
  'Mocha describe()':
    'prefix': 'des'
    'body': 'describe(\'${1:component}\', () => {\n\t$2\n});$3'
  'Mocha it()':
    'prefix': 'it'
    'body': 'it(\'should ${1:funct}\', ($2) => {\n\t$3\n});$4'
  'Template String':
    'prefix': 'tstr'
    'body': '`$1\${${2:var}}$3`$4'
  'setTimeout (es6)':
    'prefix': 'settime'
    'body': 'setTimeout(($1) => {\n\t$3\n}, ${2:1000});$4'
  'var x = func':
    'prefix': 'varfun'
    'body': 'var ${1:ref} = ($2) => {\n\t$3\n};$4'

#JSON
'.source.json':
  'key:value':
    'prefix': 'kv'
    'body': '''"${1:key}": ${3:"${2:value}"},$4'''
  'engines':
    'prefix': 'engines'
    'body': '"engines" : {\n\t"node": "^${1:6.1.0}",\n\t"npm" : "^${2:3.8.8}"\n},'

#React
'.source.js.jsx':
  'class component':
    'prefix': 'ccomp'
    'body': '''import React, { Component } from 'react'

    class ${1:MyComponent} extends Component {
      render() {
        return (
          ${2:<div>
            ${3:MyComponent}
          </div>}
        );
      }
    }

    export default ${1:MyComponent}'''
  'func component':
    'prefix': 'fcomp'
    'body': '''import React, { Component } from 'react'

    export default props => {
      return (
        ${1:<div>
          ${2:FunctionalComponent}
        </div>}
      );
    }'''
  'class method':
    'prefix': 'cm'
    'body': '${1:method}(${2:args}) {\n\t$3\n}'
#React class body
'.meta.class.body.js':
  'constructor':
    'prefix': 'const'
    'body': 'constructor(props) {\n\tsuper(props);\n\t\n\t${1:this.state = $2}\n}'

#HTML
'.text.html':
  'Underscore Template':
    'prefix': '_tem'
    'body': '''<%${1:=} $2 %>$3'''
  'Comment':
    'prefix': 'comment'
    'body': '''<!-- ${1:Comment} -->'''
    

#PHP outside code block tags
'.text.html.php':
  'echo shorthand':
    'prefix': 'echo'
    'body': '<?= $1 ?>$2'

#PHP
'.source.php':
  'key => value':
    'prefix': 'kv'
    'body': ''''${1:key}' => ${2:value},$3'''
  '$ = () ? a : b;':
    'prefix': 'ternary'
    'body': '''(${1:condition}) ? ${2:true} : ${3:false};$4'''
  '$var':
    'prefix': 'variable'
    'body': '''$${1:var} = ${2:value};$3'''
  '$var1[] = $var2[]':
    'prefix': 'varreasign'
    'body': '''$${2:var1}['${1:val}'] = ${4:($5) }$${3:var2}['${1:val}'];$6'''
  'assoc var':
    'prefix': 'assocvar'
    'body': '''$${1:var}['$2'] = $3;$4'''
  'consoleLog()':
    'prefix': 'log'
    'body': 'consoleLog($$1);$2'
  'sendJSON':
    'prefix': 'sj'
    'body': 'sendJSON($${1:response}, ${2:200});$3'
  'function':
    'prefix': 'fun'
    'body': 'function ${1:functionName} ($${2:args}) {\n\t$3\n}$4'
  'new Class':
    'prefix': 'class'
    'body': 'class ${1:ClassName} {\n\n\tfunction __construct($2) {\n\t\t${3:#code}\n\t}\n}'
  'this->':
    'prefix': 'this'
    'body': '$this->$1'
  'obj prop':
    'prefix': 'op'
    'body': '$${1:object}->${2:prop}'
  'obj method':
    'prefix': 'om'
    'body': '$${1:object}->${2:method}($${3:args})$4'

#Typescript
'.source.ts':
  '<Obj> Method':
    'prefix': 'kf'
    'body': '${1:methodName}: function (${2:attribute}) {\n\t$3\n}${4:,}'
  '<Obj> key: value':
    'prefix': 'kv'
    'body': '${1:key}: ${2:value},$3'
  'Prototype':
    'prefix': 'proto'
    'body': '${1:ClassName}.prototype.${2:methodName} = function ($3) {\n\t$0\n};'
  'do':
    'prefix': 'do'
    'body': 'do {\n\t$2\n} while (${1:true});'
  'if':
    'prefix': 'if'
    'body': 'if (${1:true}) {\n\t$2\n}'
  'if … else':
    'prefix': 'ife'
    'body': 'if (${1:true}) {\n\t$2\n} else {\n\t$3\n}'
  'else':
    'prefix': 'else'
    'body': 'else {\n\t$1\n}'
  'else if':
    'prefix': 'elseif'
    'body': 'else if (${1:true}) {\n\t$2\n}'
  'for':
    'prefix' : 'for'
    'body' : 'for (var ${2:i} = 0; ${2:i} < ${1:array}.length; ${2:i}++) {\n\t${1:array}[${2:i}]$3\n}'
  'for in':
    'prefix': 'forin'
    'body': 'for (var ${1:variable} in ${2:object}) {\n\t${3:if (${2:object}.hasOwnProperty(${1:variable})) {\n\t\t$4\n\t\\}}\n}'
  'for of':
    'prefix': 'forof'
    'body': 'for (${1:variable} of ${2:iterable}) {\n\t$3\n}'
  'Function':
    'prefix': 'fun'
    'body': 'function ${1:functionName}($2) {\n\t$0\n}'
  'Anonymous Function':
    'prefix': 'fanon'
    'body': 'function ($1) {\n\t$2\n}'
  'Generator':
    'prefix': 'gen',
    'body': 'function* ${1:functionName}($2) {\n\t$0\n}'
  'Anonymous Generator':
    'prefix': 'g'
    'body': 'function* ($1) {\n\t$2\n}'
  'getElementsByClassName':
    'prefix': 'get'
    'body': 'getElementsByClassName(${1:\'${2:className}\'})$3'
  'getElementsByName':
    'prefix': 'getn'
    'body': 'getElementsByName(${1:\'${2:name}\'})$3'
  'getElementsByTagName':
    'prefix': 'gett'
    'body': 'getElementsByTagName(${1:\'${2:tagName}\'})$3'
  'getElementById':
    'prefix': 'geti'
    'body': 'getElementById(${1:\'${2:id}\'})$3'
  'querySelector':
    'prefix': 'qs'
    'body': 'querySelector(${1:\'${2:query}\'})$3'
  'querySelectorAll':
    'prefix': 'qsa'
    'body': 'querySelectorAll(${1:\'${2:query}\'})$3'
  'Immediately-Invoked Function Expression':
    'prefix': 'iife'
    'body': '(function() {\n\t${1:\'use strict\';\n}\t$2\n}());'
  'log':
    'prefix': 'log'
    'body': 'console.log($1);$0'
  'warn':
    'prefix': 'warn'
    'body': 'console.warn($1);$0'
  'error':
    'prefix': 'error'
    'body': 'console.error($1);$0'
  'inspect':
    'prefix': 'inspect'
    'body': 'console.log(require(\'util\').inspect($0, { depth: null }));'
  'new Promise':
    'prefix': 'prom'
    'body': 'new Promise(function(resolve, reject) {\n\t$1\n});$0'
  'setInterval function':
    'prefix': 'interval'
    'body': 'setInterval(${2:function () {\n\t$3\n\\}}, ${1:10});'
  'setTimeout function':
    'prefix': 'timeout'
    'body': 'setTimeout(${2:function () {\n\t$3\n\\}}, ${1:10});'
  'switch':
    'prefix': 'switch'
    'body': 'switch (${1:expression}) {\n\tcase ${2:expression}:\n\t\t$4\n\t\tbreak;$5\n\tdefault:\n\t\t$3\n}'
  'case':
    'prefix': 'case'
    'body': 'case ${1:expression}:\n\t$2\n\tbreak;'
  'try':
    'prefix': 'try'
    'body': 'try {\n\t$1\n} catch (${2:e}) {\n\t$3\n}${4: finally {\n\t$5\n\\}}'
  'while':
    'prefix': 'while'
    'body': 'while (${1:true}) {\n\t$2\n}'
  'Start Docblock':
    'prefix': '/**'
    'body': '/**\n * $1\n */$0'
  'CommonJS require':
    'prefix': 'req'
    'body': 'const ${1:module} = require(\'${1:module}\');'
  'Class':
    'prefix': 'class'
    'body': 'class ${1:ClassName} {\n\tconstructor($2) {\n\t\t$3\n\t}\n}'
  'export function':
    'prefix': 'expfun'
    'body': 'exports.${1:functionName} = function ($2) {\n\t${3:// body...}\n};'
  'export module':
    'prefix': 'expmod'
    'body': 'module.exports = ${1:name};'
  'Backbone View':
    'prefix': 'bbv'
    'body': 'Backbone.View.extend({\n\t${1:// }\n});$2'
  'Backbone Model':
    'prefix': 'bbm'
    'body': 'Backbone.Model.extend({\n\t${1:// }\n});$2'
  'Backbone Collection':
    'prefix': 'bbc'
    'body': 'Backbone.Collection.extend({\n\t${1:// }\n});$2'
  'Backbone Router':
    'prefix': 'bbr'
    'body': 'Backbone.Router.extend({\n\t${1:// }\n});'
  'Backbone Module':
    'prefix': 'bbmod'
    'body': '''var app = app || {};

    (function($) {
      'use strict';

      var ${1:thing} = Backbone.${2:View}.extend({
        ${4:// }
      });

      app.${3:Module} = ${1:thing};

    }(jQuery));'''
  '(…) ? true : false;':
    'prefix': 'ternary'
    'body': '(${1:expression}) ? ${2:true} : ${3:false};$4'

#SCSS
'.source.css.scss':
  'import':
    'prefix': 'import'
    'body': '@import \'$1\';$2'
